@page "/Import"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.EntityFrameworkCore
@using NikePro.Data
@inject IDbContextFactory<NikePro.Data.ApplicationDbContext> DbFactory
 @implements IAsyncDisposable
 @inject IJSRuntime js

<PageTitle>Загрузка файла Excel для импорта в базу данных</PageTitle>
<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>
@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>


        <div>Количество импортированных классов: @productList.Count()</div>
        <div>Количество импортированных учеников: @productTypeList.Count()</div>
        @if (StartTime != null)
        {
            TimeSpan ts = (EndTime ?? DateTime.Now).Subtract(StartTime ?? DateTime.Now);
            <div>
                Время выполнения: @String.Format("{0:00}:{1:00}", ts.Seconds, ts.Milliseconds / 10);
            </div>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    public string ErrorMessage { get; set; } = "";

    DateTime? StartTime;
    DateTime? EndTime;
    //это будет использовать кучу оперативной памяти
    public List<NikePro.Data.Product> productList = new();
    public List<NikePro.Data.ProductType> productTypeList = new();

    private bool isLoading;

    string? errworksheet { get; set; } = "";

    int? errindexrow { get; set; } = 0;
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                using (var fileStream = browserFile.OpenReadStream(MAX_FILESIZE))//от утечек
                {

                    productList = new();
                    productTypeList = new();

                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(browserFile.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);
                    using (var destinationStream = new FileStream(targetFilePath, FileMode.Create))//памяти
                    {//не то, чтобы это довольно плохо, просто потом сборщик мусора будет немного грузить сервер.
                        await fileStream.CopyToAsync(destinationStream);
                        StartTime = DateTime.Now;
                        await GetDataTableFromExcelAsync(destinationStream);
                        EndTime = DateTime.Now;
                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }

        isLoading = false;
    }

    public async Task GetDataTableFromExcelAsync(FileStream file)
    {

        using (XLWorkbook workbook = new XLWorkbook(file))
        {
            using (var context = DbFactory.CreateDbContext())
            {
                try
                {
                    foreach (IXLWorksheet worksheet in workbook.Worksheets)
                    {
                        errindexrow = 1;
                        errworksheet = worksheet.Name;
                        if (worksheet.Name == "Product")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                NikePro.Data.Product product = new NikePro.Data.Product();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();
                                product.ProductId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                product.Name = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Name").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                product.ProductTypeId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ProductTypeId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                product.ImagesUrl = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "ImagesUrl").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                product.Price = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Price").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                product.Description = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Description").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                productList.Add(product);
                            }
                        }
                        errindexrow = 1;

                        if (worksheet.Name == "ProductType")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;

                                NikePro.Data.ProductType productType = new NikePro.Data.ProductType();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                productType.Id = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Id").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                productType.Name = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Name").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                productType.ProductTypeImagesURL = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Name").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                                productTypeList.Add(productType);

                            }
                        }

                    }


                    errworksheet = "";

                    foreach (var el in productList)
                    {
                        el.ProductId = 0;
                    }
                    foreach (var el in productTypeList)
                    {
                        el.Id = 0;
                    }

                    using (var tr = context.Database.BeginTransaction())
                    {
                        context.AddRange(productList);
                        context.AddRange(productTypeList);

                        await context.SaveChangesAsync();
                        tr.Commit();
                    }
                }
                catch (Exception exception)
                {
                    if (errworksheet != "")
                        ErrorMessage = "Ошибка в импорте в таблице " + errworksheet + ", строка - " + errindexrow.ToString();
                    ErrorMessage = exception.Message;
                }
            }
        }

    }

    public async ValueTask DisposeAsync() { }
}
